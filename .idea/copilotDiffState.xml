<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/components/Navbar.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/components/Navbar.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import Link from 'next/link';&#10;import Image from 'next/image';&#10;import { useEffect, useMemo, useRef, useState } from 'react';&#10;import { usePathname } from 'next/navigation';&#10;&#10;// Link type for nav items&#10;type NavItem = {&#10;  label: string;&#10;  href: string; // can be &quot;/#section&quot; or a route&#10;  sectionId?: string; // present if it's a home section link&#10;};&#10;&#10;// A fresh, polished navbar optimized for the homepage but safe globally&#10;export default function Navbar() {&#10;  const pathname = usePathname();&#10;  const isHome = pathname === '/';&#10;&#10;  const [scrolled, setScrolled] = useState(false);&#10;  const [active, setActive] = useState&lt;string&gt;('home');&#10;  const [mobileOpen, setMobileOpen] = useState(false);&#10;  const headerRef = useRef&lt;HTMLElement | null&gt;(null);&#10;  const topBarRef = useRef&lt;HTMLDivElement | null&gt;(null);&#10;&#10;  // Central definition of links; section links are anchored to home&#10;  const links: NavItem[] = useMemo(&#10;    () =&gt; [&#10;      { label: 'Home', href: '/#home', sectionId: 'home' },&#10;      { label: 'Our Story', href: '/#our-story', sectionId: 'our-story' },&#10;      { label: 'Menu', href: '/#menu', sectionId: 'menu' },&#10;      { label: 'Gallery', href: '/#gallery', sectionId: 'gallery' },&#10;      // Removed 'Franchise' from main links to avoid repetition with CTA&#10;      { label: 'Store Locator', href: '/store-locator' },&#10;      { label: 'Contact', href: '/contact' },&#10;    ],&#10;    []&#10;  );&#10;&#10;  // Close mobile menu on route change&#10;  useEffect(() =&gt; {&#10;    setMobileOpen(false);&#10;  }, [pathname]);&#10;&#10;  // Escape key to close&#10;  useEffect(() =&gt; {&#10;    if (!mobileOpen) return;&#10;    const onKey = (e: KeyboardEvent) =&gt; {&#10;      if (e.key === 'Escape') setMobileOpen(false);&#10;    };&#10;    window.addEventListener('keydown', onKey);&#10;    return () =&gt; window.removeEventListener('keydown', onKey);&#10;  }, [mobileOpen]);&#10;&#10;  // Scroll listener for background/blur changes&#10;  useEffect(() =&gt; {&#10;    const onScroll = () =&gt; setScrolled(window.scrollY &gt; 8);&#10;    onScroll();&#10;    window.addEventListener('scroll', onScroll, { passive: true });&#10;    return () =&gt; window.removeEventListener('scroll', onScroll);&#10;  }, []);&#10;&#10;  // Scroll spy for homepage sections only&#10;  useEffect(() =&gt; {&#10;    if (!isHome) return;&#10;&#10;    const sectionIds = links&#10;      .map(l =&gt; l.sectionId)&#10;      .filter((v): v is string =&gt; Boolean(v));&#10;&#10;    const observer = new IntersectionObserver(&#10;      entries =&gt; {&#10;        // Pick the section most in view by intersection ratio&#10;        let top: { id: string; ratio: number } | null = null;&#10;        for (const e of entries) {&#10;          if (!e.isIntersecting) continue;&#10;          const id = e.target.id;&#10;          const ratio = e.intersectionRatio;&#10;          if (!top || ratio &gt; top.ratio) top = { id, ratio };&#10;        }&#10;        if (top) setActive(top.id);&#10;      },&#10;      {&#10;        // Root margin to account for sticky header height&#10;        rootMargin: '-96px 0px -60% 0px',&#10;        threshold: [0.2, 0.4, 0.6, 0.8, 1],&#10;      }&#10;    );&#10;&#10;    const els = sectionIds&#10;      .map(id =&gt; document.getElementById(id))&#10;      .filter((el): el is HTMLElement =&gt; !!el);&#10;&#10;    els.forEach(el =&gt; observer.observe(el));&#10;&#10;    return () =&gt; observer.disconnect();&#10;  }, [isHome, links]);&#10;&#10;  // Smooth scroll helper that also works when already on the homepage&#10;  const smoothScrollTo = (hashHref: string) =&gt; {&#10;    if (!hashHref.startsWith('/#')) return; // Non-section link&#10;&#10;    const id = hashHref.replace('/#', '');&#10;    const el = document.getElementById(id);&#10;    if (!el) {&#10;      if (pathname !== '/') {&#10;        window.location.href = hashHref;&#10;      }&#10;      return;&#10;    }&#10;&#10;    const prefersReduced = window.matchMedia('(prefers-reduced-motion: reduce)').matches;&#10;    const barH = (topBarRef.current?.getBoundingClientRect().height || 80) + 8; // only top bar height&#10;    const y = el.getBoundingClientRect().top + window.scrollY - barH;&#10;&#10;    window.scrollTo({ top: y, behavior: prefersReduced ? 'auto' : 'smooth' });&#10;  };&#10;&#10;  // Adjust hash-based scrolling to account for fixed header on initial load and on hash changes&#10;  useEffect(() =&gt; {&#10;    const adjust = () =&gt; {&#10;      const hash = window.location.hash;&#10;      if (!hash) return;&#10;      const id = hash.replace('#', '');&#10;      const el = document.getElementById(id);&#10;      if (!el) return;&#10;      const barH = (topBarRef.current?.getBoundingClientRect().height || 80) + 8;&#10;      const y = el.getBoundingClientRect().top + window.scrollY - barH;&#10;      // Use a small timeout to let browser's default anchor jump settle&#10;      setTimeout(() =&gt; window.scrollTo({ top: y, behavior: 'auto' }), 0);&#10;    };&#10;&#10;    // Run on mount and when pathname changes&#10;    adjust();&#10;    window.addEventListener('hashchange', adjust);&#10;    return () =&gt; window.removeEventListener('hashchange', adjust);&#10;  }, [pathname]);&#10;&#10;  // Visual styles&#10;  const translucent = !scrolled &amp;&amp; isHome;&#10;  // Force transparent on mobile, opaque on lg+&#10;  const baseBg = 'bg-transparent lg:bg-white lg:shadow-md';&#10;&#10;  const NavLink = ({&#10;    label,&#10;    href,&#10;    sectionId,&#10;    onNavigate,&#10;    className = '',&#10;  }: NavItem &amp; { onNavigate?: () =&gt; void; className?: string }) =&gt; {&#10;    const isActive = sectionId ? active === sectionId : pathname === href;&#10;&#10;    // For section links, intercept click to smooth scroll when possible&#10;    const handleClick = (e: React.MouseEvent) =&gt; {&#10;      if (sectionId) {&#10;        e.preventDefault();&#10;        // Close any open mobile panel first, then scroll on next frame&#10;        onNavigate?.();&#10;        requestAnimationFrame(() =&gt; smoothScrollTo(href));&#10;      } else {&#10;        onNavigate?.();&#10;      }&#10;    };&#10;&#10;    return (&#10;      &lt;Link&#10;        href={href}&#10;        aria-current={isActive ? 'page' : undefined}&#10;        className={`relative px-3 py-2 rounded-full text-sm md:text-base manrope-medium transition-colors ${&#10;          isActive ? 'text-[#2b91cb]' : 'text-gray-700 hover:text-[#2b91cb]'&#10;        } ${className}`}&#10;        onClick={handleClick}&#10;      &gt;&#10;        &lt;span&gt;{label}&lt;/span&gt;&#10;        &lt;span&#10;          className={`absolute left-1/2 -translate-x-1/2 -bottom-0.5 h-0.5 rounded-full transition-all ${&#10;            isActive ? 'w-6 bg-[#2b91cb]' : 'w-0 bg-transparent'&#10;          }`}&#10;          aria-hidden&#10;        /&gt;&#10;      &lt;/Link&gt;&#10;    );&#10;  };&#10;&#10;  return (&#10;    &lt;header ref={(el) =&gt; { headerRef.current = el; }} className={`fixed top-0 left-0 right-0 z-[100] ${baseBg}`} style={{ paddingTop: 'env(safe-area-inset-top)' }}&gt;&#10;      &lt;nav className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8&quot; aria-label=&quot;Primary&quot;&gt;&#10;        {/* Top bar */}&#10;        &lt;div ref={topBarRef} className=&quot;h-16 md:h-20 flex items-center justify-between gap-3&quot;&gt;&#10;          {/* Left: Logo */}&#10;          &lt;Link href=&quot;/&quot; className=&quot;flex items-center gap-2 group shrink-0&quot; aria-label=&quot;Makers of Milkshakes - Home&quot;&gt;&#10;            &lt;Image&#10;              src=&quot;/logo.png&quot;&#10;              alt=&quot;Makers of Milkshakes Logo&quot;&#10;              width={40}&#10;              height={40}&#10;              className=&quot;transition-transform group-hover:scale-105&quot;&#10;              priority&#10;            /&gt;&#10;            &lt;span className=&quot;hidden md:inline text-lg syne-bold text-[#2b91cb]&quot;&gt;Makers of Milkshakes&lt;/span&gt;&#10;          &lt;/Link&gt;&#10;&#10;          {/* Center: Desktop nav */}&#10;          &lt;div className=&quot;hidden lg:flex items-center gap-1&quot;&gt;&#10;            {links.map(l =&gt; (&#10;              &lt;NavLink key={l.label} label={l.label} href={l.href} sectionId={l.sectionId} /&gt;&#10;            ))}&#10;          &lt;/div&gt;&#10;&#10;          {/* Right: Desktop CTA &amp; Mobile Hamburger */}&#10;          &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;            &lt;div className=&quot;hidden lg:flex items-center gap-2&quot;&gt;&#10;              &lt;Link&#10;                href=&quot;/#franchise&quot;&#10;                className=&quot;inline-flex items-center justify-center px-4 py-2 rounded-full text-white bg-gradient-to-r from-blue-600 to-blue-500 hover:from-blue-700 hover:to-blue-600 transition-colors shadow-sm&quot;&#10;                onClick={e =&gt; {&#10;                  if (isHome) {&#10;                    e.preventDefault();&#10;                    smoothScrollTo('/#franchise');&#10;                  }&#10;                }}&#10;              &gt;&#10;                Franchise With Us&#10;              &lt;/Link&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Mobile hamburger */}&#10;            &lt;button&#10;              type=&quot;button&quot;&#10;              className=&quot;lg:hidden inline-flex items-center justify-center h-10 w-10 rounded-full bg-white text-gray-800 ring-1 ring-black/10 shadow-sm focus:outline-none focus-visible:ring-2 focus-visible:ring-[#2b91cb]&quot;&#10;              aria-label={mobileOpen ? 'Close menu' : 'Open menu'}&#10;              aria-expanded={mobileOpen}&#10;              aria-controls=&quot;mobile-menu&quot;&#10;              onClick={() =&gt; setMobileOpen(o =&gt; !o)}&#10;            &gt;&#10;              {!mobileOpen ? (&#10;                &lt;svg className=&quot;h-6 w-6&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; aria-hidden=&quot;true&quot;&gt;&#10;                  &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M3.75 6.75h16.5M3.75 12h16.5M3.75 17.25h16.5&quot; /&gt;&#10;                &lt;/svg&gt;&#10;              ) : (&#10;                &lt;svg className=&quot;h-6 w-6&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; aria-hidden=&quot;true&quot;&gt;&#10;                  &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M6 18L18 6M6 6l12 12&quot; /&gt;&#10;                &lt;/svg&gt;&#10;              )}&#10;            &lt;/button&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Mobile: slide-down panel below top bar */}&#10;        &lt;div className=&quot;md:hidden&quot; id=&quot;mobile-menu&quot; role=&quot;region&quot; aria-label=&quot;Mobile menu&quot;&gt;&#10;          {mobileOpen &amp;&amp; (&#10;            &lt;div className=&quot;mt-2 mb-3 rounded-2xl bg-white ring-1 ring-gray-200 shadow-md p-2 animate-fade-in&quot;&gt;&#10;              &lt;div className=&quot;flex flex-col gap-1&quot;&gt;&#10;                {links.map(l =&gt; (&#10;                  &lt;NavLink&#10;                    key={l.label}&#10;                    label={l.label}&#10;                    href={l.href}&#10;                    sectionId={l.sectionId}&#10;                    onNavigate={() =&gt; setMobileOpen(false)}&#10;                    className=&quot;block w-full px-3 py-3 rounded-xl text-base hover:bg-gray-50&quot;&#10;                  /&gt;&#10;                ))}&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;pt-2&quot;&gt;&#10;                &lt;Link&#10;                  href=&quot;/#franchise&quot;&#10;                  className=&quot;block w-full text-center px-4 py-3 rounded-xl text-white bg-gradient-to-r from-blue-600 to-blue-500 hover:from-blue-700 hover:to-blue-600 transition-colors shadow-sm&quot;&#10;                  onClick={e =&gt; {&#10;                    if (isHome) {&#10;                      e.preventDefault();&#10;                      smoothScrollTo('/#franchise');&#10;                    }&#10;                    setMobileOpen(false);&#10;                  }}&#10;                &gt;&#10;                  Franchise With Us&#10;                &lt;/Link&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;      &lt;/nav&gt;&#10;    &lt;/header&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="'use client';&#10;&#10;import Link from 'next/link';&#10;import Image from 'next/image';&#10;import { useEffect, useMemo, useRef, useState } from 'react';&#10;import { usePathname } from 'next/navigation';&#10;&#10;// Link type for nav items&#10;type NavItem = {&#10;  label: string;&#10;  href: string; // can be &quot;/#section&quot; or a route&#10;  sectionId?: string; // present if it's a home section link&#10;};&#10;&#10;// A fresh, polished navbar optimized for the homepage but safe globally&#10;export default function Navbar() {&#10;  const pathname = usePathname();&#10;  const isHome = pathname === '/';&#10;&#10;  const [scrolled, setScrolled] = useState(false);&#10;  const [active, setActive] = useState&lt;string&gt;('home');&#10;  const [mobileOpen, setMobileOpen] = useState(false);&#10;  const headerRef = useRef&lt;HTMLElement | null&gt;(null);&#10;  const topBarRef = useRef&lt;HTMLDivElement | null&gt;(null);&#10;&#10;  // Central definition of links; section links are anchored to home&#10;  const links: NavItem[] = useMemo(&#10;    () =&gt; [&#10;      { label: 'Home', href: '/#home', sectionId: 'home' },&#10;      { label: 'Our Story', href: '/#our-story', sectionId: 'our-story' },&#10;      { label: 'Menu', href: '/#menu', sectionId: 'menu' },&#10;      { label: 'Gallery', href: '/#gallery', sectionId: 'gallery' },&#10;      // Removed 'Franchise' from main links to avoid repetition with CTA&#10;      { label: 'Store Locator', href: '/store-locator' },&#10;      { label: 'Contact', href: '/contact' },&#10;    ],&#10;    []&#10;  );&#10;&#10;  // Close mobile menu on route change&#10;  useEffect(() =&gt; {&#10;    setMobileOpen(false);&#10;  }, [pathname]);&#10;&#10;  // Escape key to close&#10;  useEffect(() =&gt; {&#10;    if (!mobileOpen) return;&#10;    const onKey = (e: KeyboardEvent) =&gt; {&#10;      if (e.key === 'Escape') setMobileOpen(false);&#10;    };&#10;    window.addEventListener('keydown', onKey);&#10;    return () =&gt; window.removeEventListener('keydown', onKey);&#10;  }, [mobileOpen]);&#10;&#10;  // Scroll listener for background/blur changes&#10;  useEffect(() =&gt; {&#10;    const onScroll = () =&gt; setScrolled(window.scrollY &gt; 8);&#10;    onScroll();&#10;    window.addEventListener('scroll', onScroll, { passive: true });&#10;    return () =&gt; window.removeEventListener('scroll', onScroll);&#10;  }, []);&#10;&#10;  // Scroll spy for homepage sections only&#10;  useEffect(() =&gt; {&#10;    if (!isHome) return;&#10;&#10;    const sectionIds = links&#10;      .map(l =&gt; l.sectionId)&#10;      .filter((v): v is string =&gt; Boolean(v));&#10;&#10;    const observer = new IntersectionObserver(&#10;      entries =&gt; {&#10;        // Pick the section most in view by intersection ratio&#10;        let top: { id: string; ratio: number } | null = null;&#10;        for (const e of entries) {&#10;          if (!e.isIntersecting) continue;&#10;          const id = e.target.id;&#10;          const ratio = e.intersectionRatio;&#10;          if (!top || ratio &gt; top.ratio) top = { id, ratio };&#10;        }&#10;        if (top) setActive(top.id);&#10;      },&#10;      {&#10;        // Root margin to account for sticky header height&#10;        rootMargin: '-96px 0px -60% 0px',&#10;        threshold: [0.2, 0.4, 0.6, 0.8, 1],&#10;      }&#10;    );&#10;&#10;    const els = sectionIds&#10;      .map(id =&gt; document.getElementById(id))&#10;      .filter((el): el is HTMLElement =&gt; !!el);&#10;&#10;    els.forEach(el =&gt; observer.observe(el));&#10;&#10;    return () =&gt; observer.disconnect();&#10;  }, [isHome, links]);&#10;&#10;  // Smooth scroll helper that also works when already on the homepage&#10;  const smoothScrollTo = (hashHref: string) =&gt; {&#10;    if (!hashHref.startsWith('/#')) return; // Non-section link&#10;&#10;    const id = hashHref.replace('/#', '');&#10;    const el = document.getElementById(id);&#10;    if (!el) {&#10;      if (pathname !== '/') {&#10;        window.location.href = hashHref;&#10;      }&#10;      return;&#10;    }&#10;&#10;    const prefersReduced = window.matchMedia('(prefers-reduced-motion: reduce)').matches;&#10;    const isLg = window.matchMedia('(min-width: 1024px)').matches;&#10;    const barH = (topBarRef.current?.getBoundingClientRect().height || 80) + 8; // only top bar height&#10;    const offset = isLg ? barH : 0; // exact top on small screens&#10;    const y = el.getBoundingClientRect().top + window.scrollY - offset;&#10;&#10;    window.scrollTo({ top: y, behavior: prefersReduced ? 'auto' : 'smooth' });&#10;  };&#10;&#10;  // Adjust hash-based scrolling to account for fixed header on initial load and on hash changes&#10;  useEffect(() =&gt; {&#10;    const adjust = () =&gt; {&#10;      const hash = window.location.hash;&#10;      if (!hash) return;&#10;      const id = hash.replace('#', '');&#10;      const el = document.getElementById(id);&#10;      if (!el) return;&#10;      const isLg = window.matchMedia('(min-width: 1024px)').matches;&#10;      const barH = (topBarRef.current?.getBoundingClientRect().height || 80) + 8;&#10;      const offset = isLg ? barH : 0;&#10;      const y = el.getBoundingClientRect().top + window.scrollY - offset;&#10;      setTimeout(() =&gt; window.scrollTo({ top: y, behavior: 'auto' }), 0);&#10;    };&#10;&#10;    // Run on mount and when pathname changes&#10;    adjust();&#10;    window.addEventListener('hashchange', adjust);&#10;    return () =&gt; window.removeEventListener('hashchange', adjust);&#10;  }, [pathname]);&#10;&#10;  // Visual styles&#10;  const translucent = !scrolled &amp;&amp; isHome;&#10;  // Force transparent on mobile, opaque on lg+&#10;  const baseBg = 'bg-transparent lg:bg-white lg:shadow-md';&#10;&#10;  const NavLink = ({&#10;    label,&#10;    href,&#10;    sectionId,&#10;    onNavigate,&#10;    className = '',&#10;  }: NavItem &amp; { onNavigate?: () =&gt; void; className?: string }) =&gt; {&#10;    const isActive = sectionId ? active === sectionId : pathname === href;&#10;&#10;    // For section links, intercept click to smooth scroll when possible&#10;    const handleClick = (e: React.MouseEvent) =&gt; {&#10;      if (sectionId) {&#10;        e.preventDefault();&#10;        // Close any open mobile panel first, then scroll on next frame&#10;        onNavigate?.();&#10;        requestAnimationFrame(() =&gt; smoothScrollTo(href));&#10;      } else {&#10;        onNavigate?.();&#10;      }&#10;    };&#10;&#10;    return (&#10;      &lt;Link&#10;        href={href}&#10;        aria-current={isActive ? 'page' : undefined}&#10;        className={`relative px-3 py-2 rounded-full text-sm md:text-base manrope-medium transition-colors ${&#10;          isActive ? 'text-[#2b91cb]' : 'text-gray-700 hover:text-[#2b91cb]'&#10;        } ${className}`}&#10;        onClick={handleClick}&#10;      &gt;&#10;        &lt;span&gt;{label}&lt;/span&gt;&#10;        &lt;span&#10;          className={`absolute left-1/2 -translate-x-1/2 -bottom-0.5 h-0.5 rounded-full transition-all ${&#10;            isActive ? 'w-6 bg-[#2b91cb]' : 'w-0 bg-transparent'&#10;          }`}&#10;          aria-hidden&#10;        /&gt;&#10;      &lt;/Link&gt;&#10;    );&#10;  };&#10;&#10;  return (&#10;    &lt;header ref={(el) =&gt; { headerRef.current = el; }} className={`fixed top-0 left-0 right-0 z-[1000] ${baseBg}`} style={{ paddingTop: 'env(safe-area-inset-top)' }}&gt;&#10;      &lt;nav className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8&quot; aria-label=&quot;Primary&quot;&gt;&#10;        {/* Top bar */}&#10;        &lt;div ref={topBarRef} className=&quot;h-16 md:h-20 flex items-center justify-between gap-3&quot;&gt;&#10;          {/* Left: Logo */}&#10;          &lt;Link href=&quot;/&quot; className=&quot;flex items-center gap-2 group shrink-0&quot; aria-label=&quot;Makers of Milkshakes - Home&quot;&gt;&#10;            &lt;Image&#10;              src=&quot;/logo.png&quot;&#10;              alt=&quot;Makers of Milkshakes Logo&quot;&#10;              width={40}&#10;              height={40}&#10;              className=&quot;transition-transform group-hover:scale-105&quot;&#10;              priority&#10;            /&gt;&#10;            &lt;span className=&quot;hidden md:inline text-lg syne-bold text-[#2b91cb]&quot;&gt;Makers of Milkshakes&lt;/span&gt;&#10;          &lt;/Link&gt;&#10;&#10;          {/* Center: Desktop nav */}&#10;          &lt;div className=&quot;hidden lg:flex items-center gap-1&quot;&gt;&#10;            {links.map(l =&gt; (&#10;              &lt;NavLink key={l.label} label={l.label} href={l.href} sectionId={l.sectionId} /&gt;&#10;            ))}&#10;          &lt;/div&gt;&#10;&#10;          {/* Right: Desktop CTA &amp; Mobile Hamburger */}&#10;          &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;            &lt;div className=&quot;hidden lg:flex items-center gap-2&quot;&gt;&#10;              &lt;Link&#10;                href=&quot;/#franchise&quot;&#10;                className=&quot;inline-flex items-center justify-center px-4 py-2 rounded-full text-white bg-gradient-to-r from-blue-600 to-blue-500 hover:from-blue-700 hover:to-blue-600 transition-colors shadow-sm&quot;&#10;                onClick={e =&gt; {&#10;                  if (isHome) {&#10;                    e.preventDefault();&#10;                    smoothScrollTo('/#franchise');&#10;                  }&#10;                }}&#10;              &gt;&#10;                Franchise With Us&#10;              &lt;/Link&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Mobile hamburger */}&#10;            &lt;button&#10;              type=&quot;button&quot;&#10;              className=&quot;lg:hidden inline-flex items-center justify-center h-10 w-10 rounded-full bg-white text-gray-800 ring-1 ring-black/10 shadow-sm focus:outline-none focus-visible:ring-2 focus-visible:ring-[#2b91cb]&quot;&#10;              aria-label={mobileOpen ? 'Close menu' : 'Open menu'}&#10;              aria-expanded={mobileOpen}&#10;              aria-controls=&quot;mobile-menu&quot;&#10;              onClick={() =&gt; setMobileOpen(o =&gt; !o)}&#10;            &gt;&#10;              {!mobileOpen ? (&#10;                &lt;svg className=&quot;h-6 w-6&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; aria-hidden=&quot;true&quot;&gt;&#10;                  &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M3.75 6.75h16.5M3.75 12h16.5M3.75 17.25h16.5&quot; /&gt;&#10;                &lt;/svg&gt;&#10;              ) : (&#10;                &lt;svg className=&quot;h-6 w-6&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; strokeWidth={1.5} stroke=&quot;currentColor&quot; aria-hidden=&quot;true&quot;&gt;&#10;                  &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M6 18L18 6M6 6l12 12&quot; /&gt;&#10;                &lt;/svg&gt;&#10;              )}&#10;            &lt;/button&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Mobile: slide-down panel below top bar */}&#10;        &lt;div className=&quot;lg:hidden&quot; id=&quot;mobile-menu&quot; role=&quot;region&quot; aria-label=&quot;Mobile menu&quot;&gt;&#10;          {mobileOpen &amp;&amp; (&#10;            &lt;div className=&quot;mt-2 mb-3 rounded-2xl bg-white ring-1 ring-gray-200 shadow-md p-2 animate-fade-in&quot;&gt;&#10;              &lt;div className=&quot;flex flex-col gap-1&quot;&gt;&#10;                {links.map(l =&gt; (&#10;                  &lt;NavLink&#10;                    key={l.label}&#10;                    label={l.label}&#10;                    href={l.href}&#10;                    sectionId={l.sectionId}&#10;                    onNavigate={() =&gt; setMobileOpen(false)}&#10;                    className=&quot;block w-full px-3 py-3 rounded-xl text-base hover:bg-gray-50&quot;&#10;                  /&gt;&#10;                ))}&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;pt-2&quot;&gt;&#10;                &lt;Link&#10;                  href=&quot;/#franchise&quot;&#10;                  className=&quot;block w-full text-center px-4 py-3 rounded-xl text-white bg-gradient-to-r from-blue-600 to-blue-500 hover:from-blue-700 hover:to-blue-600 transition-colors shadow-sm&quot;&#10;                  onClick={e =&gt; {&#10;                    if (isHome) {&#10;                      e.preventDefault();&#10;                      smoothScrollTo('/#franchise');&#10;                    }&#10;                    setMobileOpen(false);&#10;                  }}&#10;                &gt;&#10;                  Franchise With Us&#10;                &lt;/Link&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;      &lt;/nav&gt;&#10;    &lt;/header&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>